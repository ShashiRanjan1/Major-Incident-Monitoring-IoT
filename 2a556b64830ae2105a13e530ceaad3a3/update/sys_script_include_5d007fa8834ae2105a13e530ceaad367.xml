<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_60748_monitoring.PureCryptoUtil</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <mobile_callable>false</mobile_callable>
        <name>PureCryptoUtil</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var PureCryptoUtil = Class.create();
PureCryptoUtil.prototype = {
    initialize: function() {},

    // Compute SHA256 hash as hex string
    sha256: function(msg) {
        return this._sha256(msg);
    },

    // Compute HMAC-SHA256 with key and msg, output uppercase hex
    hmacSha256: function(key, msg) {
        return this._hmac_sha256(key, msg).toUpperCase();
    },

    // --- internal functions below ---

    // SHA256 implementation (pure JS)
    _sha256: function(ascii) {
        var rightRotate = function(value, amount) {
            return (value>>>amount) | (value<<(32 - amount));
        };

        var mathPow = Math.pow;
        var maxWord = mathPow(2, 32);
        var lengthProperty = 'length'
        var i, j; // Used as a counter across the whole file
        var result = ''

        var words = [];
        var asciiBitLength = ascii[lengthProperty]*8;

        // Constants [first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311]
        var hash = [];
        var k = [];

        k[0] = 0x428a2f98; k[1] = 0x71374491; k[2] = 0xb5c0fbcf; k[3] = 0xe9b5dba5;
        k[4] = 0x3956c25b; k[5] = 0x59f111f1; k[6] = 0x923f82a4; k[7] = 0xab1c5ed5;
        k[8] = 0xd807aa98; k[9] = 0x12835b01; k[10] = 0x243185be; k[11] = 0x550c7dc3;
        k[12] = 0x72be5d74; k[13] = 0x80deb1fe; k[14] = 0x9bdc06a7; k[15] = 0xc19bf174;
        k[16] = 0xe49b69c1; k[17] = 0xefbe4786; k[18] = 0x0fc19dc6; k[19] = 0x240ca1cc;
        k[20] = 0x2de92c6f; k[21] = 0x4a7484aa; k[22] = 0x5cb0a9dc; k[23] = 0x76f988da;
        k[24] = 0x983e5152; k[25] = 0xa831c66d; k[26] = 0xb00327c8; k[27] = 0xbf597fc7;
        k[28] = 0xc6e00bf3; k[29] = 0xd5a79147; k[30] = 0x06ca6351; k[31] = 0x14292967;
        k[32] = 0x27b70a85; k[33] = 0x2e1b2138; k[34] = 0x4d2c6dfc; k[35] = 0x53380d13;
        k[36] = 0x650a7354; k[37] = 0x766a0abb; k[38] = 0x81c2c92e; k[39] = 0x92722c85;
        k[40] = 0xa2bfe8a1; k[41] = 0xa81a664b; k[42] = 0xc24b8b70; k[43] = 0xc76c51a3;
        k[44] = 0xd192e819; k[45] = 0xd6990624; k[46] = 0xf40e3585; k[47] = 0x106aa070;
        k[48] = 0x19a4c116; k[49] = 0x1e376c08; k[50] = 0x2748774c; k[51] = 0x34b0bcb5;
        k[52] = 0x391c0cb3; k[53] = 0x4ed8aa4a; k[54] = 0x5b9cca4f; k[55] = 0x682e6ff3;
        k[56] = 0x748f82ee; k[57] = 0x78a5636f; k[58] = 0x84c87814; k[59] = 0x8cc70208;
        k[60] = 0x90befffa; k[61] = 0xa4506ceb; k[62] = 0xbef9a3f7; k[63] = 0xc67178f2;

        hash[0] = 0x6a09e667;
        hash[1] = 0xbb67ae85;
        hash[2] = 0x3c6ef372;
        hash[3] = 0xa54ff53a;
        hash[4] = 0x510e527f;
        hash[5] = 0x9b05688c;
        hash[6] = 0x1f83d9ab;
        hash[7] = 0x5be0cd19;

        // Pre-processing
        var i;
        for (i = 0; i < ascii[lengthProperty]; i++) {
            words[i >> 2] |= ascii.charCodeAt(i) << (24 - (i % 4) * 8);
        }

        // Append '1' bit (plus zero padding)
        words[i >> 2] |= 0x80 << (24 - (i % 4) * 8);

        // Append length in bits
        words[((asciiBitLength + 64 >> 9) << 4) + 15] = asciiBitLength;

        for (var j = 0; j < words.length; j += 16) {
            var w = [];
            for (i = 0; i < 16; i++) w[i] = words[j + i] | 0;
            for (i = 16; i < 64; i++) {
                var s0 = rightRotate(w[i - 15], 7) ^ rightRotate(w[i - 15], 18) ^ (w[i - 15] >>> 3);
                var s1 = rightRotate(w[i - 2], 17) ^ rightRotate(w[i - 2], 19) ^ (w[i - 2] >>> 10);
                w[i] = (w[i - 16] + s0 + w[i - 7] + s1) | 0;
            }

            var a = hash[0];
            var b = hash[1];
            var c = hash[2];
            var d = hash[3];
            var e = hash[4];
            var f = hash[5];
            var g = hash[6];
            var h = hash[7];

            for (i = 0; i < 64; i++) {
                var S1 = rightRotate(e, 6) ^ rightRotate(e, 11) ^ rightRotate(e, 25);
                var ch = (e & f) ^ (~e & g);
                var temp1 = (h + S1 + ch + k[i] + w[i]) | 0;
                var S0 = rightRotate(a, 2) ^ rightRotate(a, 13) ^ rightRotate(a, 22);
                var maj = (a & b) ^ (a & c) ^ (b & c);
                var temp2 = (S0 + maj) | 0;

                h = g;
                g = f;
                f = e;
                e = (d + temp1) | 0;
                d = c;
                c = b;
                b = a;
                a = (temp1 + temp2) | 0;
            }

            hash[0] = (hash[0] + a) | 0;
            hash[1] = (hash[1] + b) | 0;
            hash[2] = (hash[2] + c) | 0;
            hash[3] = (hash[3] + d) | 0;
            hash[4] = (hash[4] + e) | 0;
            hash[5] = (hash[5] + f) | 0;
            hash[6] = (hash[6] + g) | 0;
            hash[7] = (hash[7] + h) | 0;
        }

        for (i = 0; i < hash.length; i++) {
            for (j = 3; j + 1; j--) {
                var b = (hash[i] >> (j * 8)) & 255;
                result += ((b < 16) ? '0' : '') + b.toString(16);
            }
        }
        return result;
    },

    // HMAC SHA256 implementation (pure JS)
    _hmac_sha256: function(key, msg) {
        var blocksize = 64; // blocksize in bytes
        if (key.length > blocksize) {
            key = this._sha256(key);
            key = this._hexToBytes(key);
        } else {
            key = this._strToBytes(key);
        }
        var o_key_pad = [];
        var i_key_pad = [];
        for (var i = 0; i < blocksize; i++) {
            o_key_pad[i] = 0x5c ^ (key[i] || 0);
            i_key_pad[i] = 0x36 ^ (key[i] || 0);
        }

        var innerHash = this._sha256(this._bytesToStr(i_key_pad) + msg);
        var hmac = this._sha256(this._bytesToStr(o_key_pad) + this._hexToBytes(innerHash).map(function(b){
            return String.fromCharCode(b);
        }).join(''));

        return hmac;
    },

    _hexToBytes: function(hex) {
        var bytes = [];
        for (var c = 0; c < hex.length; c += 2)
            bytes.push(parseInt(hex.substr(c, 2), 16));
        return bytes;
    },

    _strToBytes: function(str) {
        var bytes = [];
        for (var i = 0; i < str.length; ++i)
            bytes.push(str.charCodeAt(i));
        return bytes;
    },

    _bytesToStr: function(bytes) {
        return bytes.map(function(b){ return String.fromCharCode(b); }).join('');
    },

    type: 'PureCryptoUtil'
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-06-07 13:43:08</sys_created_on>
        <sys_id>5d007fa8834ae2105a13e530ceaad367</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>PureCryptoUtil</sys_name>
        <sys_package display_value="Monitoring" source="x_60748_monitoring">2a556b64830ae2105a13e530ceaad3a3</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Monitoring">2a556b64830ae2105a13e530ceaad3a3</sys_scope>
        <sys_update_name>sys_script_include_5d007fa8834ae2105a13e530ceaad367</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-07 13:46:44</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>5d007fa8834ae2105a13e530ceaad367</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-06-07 13:43:08</sys_created_on>
        <sys_id>b9707fa8834ae2105a13e530ceaad36a</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-06-07 13:43:08</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
